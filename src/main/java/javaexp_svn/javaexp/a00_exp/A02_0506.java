package javaexp.a00_exp;

public class A02_0506 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		1. 개발 환경을 설정할 수 있습니까? java 프로그램 설정하는 순서를 기술해보세요
		- c드라이브에 javaexp 폴더 생성, 내부에 workspace, eclipse 폴더 생성
		- jdk 다운로드 검색 후 15버전으로 다운로드 후 설치 / cmd에서 java -version을 통해 설치 확인
		- eclipse 설치 후 파일을 javaexp 폴더에 넣고 eclipse 폴더에 설치
		- 2번째 항목인 web developer로 workspace에 설치
		- dynamic web 프로젝트 생성
		- 상단 window - preference - general - workspace - utf-8로 언어 변경
		- 왼쪽의 src/main/java란에서 package 생성 / package에 class 생성 누르고 첫번째 설정 체크 후 만들기 완료 
		
		2. 지난 시간에 언급한 주요 단축키와 기능을 기술해 보세요.
		- sysout : 컨트롤+스페이스 단축키
		- 전체주석 단축키 : 컨트롤+시프트+/
		- 단일주석 단축키 : 컨트롤+/
		- 실행시켜보기 단축키 : 컨트롤+시프트+F11
		- 디버깅 모두 실행 : 컨트롤+F11
		- 줄 복사 : 컨트롤+스페이스+화살표아래키 (그래픽카드의 방향전환과 중복될 가능성 있어 단축키 확인해야함)
		
		3. 주석문의 종류와 역할을 기술하세요
		- 단일 주석문은 // 로 표기, 다중 주석문은 /*로 표기
		- 실행되는 코딩에 포함되지 않는 메모 용도
		  실무 : 작성자, 생성일, 변경일, 입력값/리턴값, 핵심 로직으로 언급될 부분
		
		4. 데이터 선언과 할당 형식을 대표적인 숫자형과 문자열을 나누어서 간단한 예제로
			출력까지 하는 예제를 만드세요
		데이터유형 변수명 = 할당할 데이터;	
		int num01 = 25;
		int num02 = 5;
		String name = "방성원";
		System.out.println(num02+"월 "+num01+"일생 "+num01+"살 "+name+"입니다.");
		
		5. 사칙연산자의 종류와 나머지 연산자를 위에 선언한 변수 기준으로 기능을 기술하세요.
		- 종류 : +, -, *, /, % 
		  int로 데이터 할당이 되었을 경우, num01+num02와 같이 단순 사칙연산이 가능하다.
		  % : 두수를 나눈 후, 나머지값을 처리할 때 필요하다.
		  	  15%7 ==> 1
		  
		- 이외에는 삼항, 대입, 증감, 논리연산자(비교연산자+비교연산자)가 있다.
		
		6. 비교연산자란 무엇인지? 종류와 내용을 기술하세요.
		결과값을 boolean값으로 true/false값을 가져온다.
		주로, 조건문이나 반복문에 활용된다.
		- 종류 : >=, <=, ==, !=, >, <
		- 순서대로 A가 B 이상, 이하, 동일, 일치하지 않음, 초과, 미만을 뜻한다.
		  != : 다를때 true값을 반환
		
		7. 조건문의 기본형식을 기술하고, 변수 age와 비교연산자를 이용하여 20세 이상에 따라
			성인/미성년을 구분하는 코드를 만드세요.
		- 조건문 기본형식 : if(조건1){} / if(조건1){}else{} / if(조건1){}else if(조건2){}else{}switch{case: break; default;}
		int age = 20;
		System.out.println("나이: "+age);
		if(age>=20){
			System.out.println("성인입니다");
		}
		else{
			System.out.println("미성년입니다");
		}
		
		8. 반복문 중, for문의 기본형식을 기술하고, 홀수로 20까지 출력하세요
		for(초기값1;반복조건2;증감연산자4){반복할 구문3}
		
		처리 프로세스 - 1 2 3 4 2 3 4 2 3 4
		
		for(cnt=1;cnt<=20;cnt+=2){
			System.out.println(cnt);}
			
		9. 자바에서 기본변수와 객체의 메모리 사용이 차이가 있다. stack/heap 영역을 기준으로 기술하세요.
		- 객체는 heap영역에 객체를 생성하고 stack영역에 객체의 주소값을 저장한다.
		  primitive 데이터는 stack영역에 바로 데이터를 할당한다.
		  heap와 객체는 대문자로 시작하여 선언,
		  	ex) Person p01 = new Person();
		  		Person : 객체는 대문자로 시작하여 선언한다.
		  		단, 참조변수(p01)는 소문자로 시작한다!
		  stack은 소문자로 보통 선언하고 할당하여 처리한다.
		  	ex) int num0 = 25;
		  		int : 기본데이터유형 소문자로 선언한다.
		  		변수명도 소문자로 시작한다.
		  		
		  객체지향 프로그램에서는 가독성을 위해 위와 같이 구분해서 선언한다.
		  에러 발생은 되지 않는다.
			
		10. 자바의 메서드 기본 형식을 기술하고, 매게변수로 금액을 입금시, 리턴값으로 2배가 되는 메서드를 만들어서 코드를 기술하세요.
		- 리턴데이터유형 메서드명(매개변수,...){
			프로세스 처리
			return 리턴할 실제 데이터;
		}
		
		static int multi(int num01){
			int tot = num01*2;
			return tot;
			}
			
		11. 배열의 기본형식을 기술하고, 좋아하는 음식배열을 선언하고, 출력하세요.
		- 배열명[index]={데이터1,2,3};
		- 데이터유형 [] 참조변수 = new 데이터유형[크기];
		String [] fruits = {"수박", "참외", "배"};
		System.out.println(fruits[0]);
		System.out.println(fruits[1]);
		System.out.println(fruits[2]);
		
		
===================================================================================
		
		# 생각해봅시다.
		1. 모듈화란 무엇이고 왜 필요로 할까?
		- 여러개의 기능, 변수, 함수 포함한 것 = 클래스
		  메서드 < 클래스 < 패키지
		  컴파일할 클래스 모아서 만든 프레임워크 = .jar 파일
		- 이런 방식으로 자료나 실행파일을 모아서 추후에 핵심코드만 사용하는 일 = 모듈화
		- 프로그램의 재활용, 효과적인 메모리 사용을 위해서 사용된다.
		- 메서드를 통해서 기능을 선언했다가 해당 메서드를 호출하면 그 기능이 수행되게
		  처리하는 여러개의 메서드, 여러개의 속성이 모여서 모듈화, 이를 처리하는 것이 클래스/객체이다.
		- 클래스가 여러개 모여서 처리하는 단위가 패키지 ==> 패키징화하여 처리하는 프로그램 ".jar"로
		  프로그램을 모듈단위로 처리하고 프레임워크로 사용된다.
		- 상속을 통한 효과적인 처리도 가능하다.
		
		2. 자바에서 메서드는 어떤 용도로 활용될까?
		- 모듈화의 첫단계로 자주 사용되는 기능 코드를 메서드명(입력값)형식으로 호출하는 것을 말한다.
		- 자바에서 메서드는 클래스의 구성요소로 사용된다.
		
		  리턴타입 메서드명(입력값){
			// 필요로 하는 프로세스 처리
			return 리턴할 데이터;
		}
		
		3. 자바의 코드와 실제 수행되는 영역의 차이점은 어떤 것이 있을까?
		- class로 선언되어 있는 것 = 코드
		- class에 선언된 코드가 메모리에 로딩되어 수행되는 것 = 객체
		- 때문에, class와 객체는 밀접한 연관관계를 가지고 있다.
		- class로 만들어진 소스 자체로는 프로그램 처리를 하지 못한다.
		  ex) 건물의 도면(class) 자체로 건물을 대체할 수 없음
			  건축물(객체)이 실제 수행함.
			  하나의 도면(class)으로 여러개의 건축물(객체)을 만들 수 있을까?
	  		  ==> 가능!
			  
		4. 클래스의 구성 요소가 어떤 것이 있을까?
		- 필드, 생성자, 메서드
		
		5. 프로그램에서 보안이란 어떤 용도로 쓰일까?
		- 적절한 범위에서 접근이 필요하게 처리
		- 메모리 & 데이터 접근 = 상호유기적 관계
		- ex) 옆집의 리모컨으로 우리집 TV가 조종된다면?
		- 프로그램도 특정한 메모리의 데이터는 한정된 범위 내에서 데이터를 처리하지 않으면
		  문제가 발생한다.
		- 
		  
		6. 소스의 재활용 방법은 어떤 것이 있을까?
		7. 객체지향 프로그램에서 상속이란 어떤 의미가 있을까?
		

		*/
	}

}
